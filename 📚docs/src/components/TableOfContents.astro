---
import type { MarkdownHeading } from 'astro';

interface Props {
	headings: Array<MarkdownHeading> | (() => Array<MarkdownHeading>);
	numLevels?: number;
}

const { headings: gotHeadings, numLevels = 2 } = Astro.props;

interface Heading {
	text: string;
	slug: string;
	headings: Array<Heading>;
}

const headings: Array<Heading> = [];
const levels: Array<Heading> = [{ headings, text: '', slug: '' }];

for (const h of typeof gotHeadings === 'function' ? gotHeadings() : gotHeadings) {
	const depth = h.depth - 2;
	if (depth < 0 || depth > numLevels - 1) {
		continue;
	}
	levels[depth]!.headings = levels[depth]?.headings || [];
	const { text, slug } = h;
	levels[depth]!.headings.push((levels[depth + 1] = { text, slug, headings: [] }));
}
---

{
	headings.length === 0 ? null : (
		<aside id="toc" aria-labelledby="#aside-title">
			<p id="aside-title" class="text-lg font-bold">
				On this page
			</p>
			<nav aria-label="Page contents">
				<ol class="flex flex-col">
					{headings.map(({ slug, text, headings }) => (
						<li>
							<a class="block rounded px-2 py-1 hover:bg-pink-700/60" href={`#${slug}`}>
								{text}
							</a>
							{headings ? (
								<ol class="ml-2 flex flex-col gap-1">
									{headings.map(({ slug, text }) => (
										<li>
											<a class="block rounded px-2 hover:bg-pink-700/60" href={`#${slug}`}>
												{text}
											</a>
										</li>
									))}
								</ol>
							) : null}
						</li>
					))}
				</ol>
			</nav>
		</aside>
	)
}

<script>
	const elements = document.querySelectorAll('#toc nav li a');
	function update(visibleId: string | null) {
		elements.forEach((link) => {
			if (visibleId && link.getAttribute('href') === `#${visibleId}`) {
				link.classList.add('bg-pink-700/40');
			} else {
				link.classList.remove('bg-pink-700/40');
			}
		});
	}

	const callback: IntersectionObserverCallback = (entries) => {
		entries.forEach((entry) => {
			const { target, isIntersecting, intersectionRatio } = entry;
			if (isIntersecting && intersectionRatio >= 1) {
				const visibleId = target.getAttribute('id');
				update(visibleId);
			}
		});
	};

	const observer = new IntersectionObserver(callback, {
		rootMargin: '-64px 0px -50% 0px',
		threshold: 1.0,
	});

	document.querySelectorAll('h2[id], h3[id]').forEach((heading) => {
		observer.observe(heading);
	});
</script>
