---
const widths = ['0.5rem', '1rem', '1.5rem', '2rem', '2.5rem', '3rem', '4rem'];
const heights = ['80%', '85%', '90%', '95%', '100%'];
const anims = [
	['0s', '4s'],
	['-3s', '7s'],
	['-2s', '8s'],
	['-3s', '9s'],
	['-2s', '10s'],
	['-4s', '11s'],
	['-6s', '12s'],
];
const opacity = [
	'opacity-10',
	'opacity-20',
	'opacity-30',
	'opacity-40',
	'opacity-50',
	'opacity-60',
	'opacity-70',
	'opacity-80',
	'opacity-90',
	'opacity-100',
];

const margins = ['0', '0.3rem', '1rem'];

interface Props {
	class?: string;
	bands: number;
}

const { bands } = Astro.props;
---

<div class="not-content">
	<div class="aurora">
		{
			Array.from(Array(bands)).map((_, i) => {
				const opacityI =
					i < bands / 2
						? Math.ceil(i / 2)
						: bands - i < opacity.length
							? bands - i
							: Math.floor((Math.random() * opacity.length) / 2 + opacity.length / 2);
				const anim = Math.floor(Math.random() * anims.length);
				return (
					<div
						class="aurora-slice"
						style={{
							'animation-delay': anims[anim][0],
							'animation-duration': anims[anim][1],
							opacity: (opacityI + 1) / 15,
							'margin-right': margins[Math.floor(Math.random() * margins.length)],
							height: heights[Math.floor(Math.random() * heights.length)],
							width: widths[Math.floor(Math.random() * widths.length)],
						}}
					/>
				);
			})
		}
	</div>
</div>
